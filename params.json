{"name":"Projet2","tagline":"","body":"#   PROJET 2 : Rendu 2\r\n\r\n#### Maxime LESOURD\r\n#### Yassine HAMOUDI\r\n\r\n\r\n******************************************************************************\r\n\r\n1. Compilation et exécution\r\n2. Suivi de l'algorithme et debuggage\r\n3. Générateur\r\n4. Structures de données\r\n5. Algorithme DPLL\r\n6. Algorithme Watched Literals\r\n7. Algorithme Tseitin\r\n8. Algorithme Colorie\r\n9. Heuristiques\r\n10. Performances\r\n\r\n******************************************************************************\r\n \r\n\r\n\r\n1. Compilation et exécution\r\n===========================\r\n\r\nPour compiler, entrer : \r\n\r\n    make\r\n\r\nDPLL et WL\r\n----------\r\n\r\nExécuter DPLL sur le fichier ex.cnf : \r\n\r\n    ./resol ex.cnf \r\n\r\nExécuter WL sur le fichier ex.cnf : \r\n\r\n    ./resol-wl ex.cnf \r\n\r\nTseitin\r\n-------\r\n\r\nRésoudre la formule propositionnelle contenue dans le fichier ex.txt : \r\n\r\n    ./tseitin ex.txt\r\n    \r\nColorie\r\n-------\r\n\r\nEssayer un coloriage à k couleur du graphe ex.col : \r\n\r\n    ./colorie k ex.col \r\n    \r\nGénérateur\r\n----------\r\n\r\nGénérer une cnf de k clauses de taille l avec n variables :\r\n  \r\n    ./gen n l k\r\n\r\nGénérer un formule propositionnelle comportant n variables différentes et c connecteurs (parmi ~,\\/,/\\,=>,<=>) :\r\n\r\n    ./gen -tseitin n c\r\n    \r\nGénérer un graphe à n sommets, avec probabilité p d'existence pour chaque arête :\r\n\r\n    ./gen -color n p\r\n    \r\nEnregistrer l'entrée générée dans un fichier ex.txt : \r\n  \r\n    ./gen -tseitin n c > ex.txt\r\n     \r\nRésoudre l'entrée générée à la volée : \r\n\r\n    ./gen -color n p |./colorie k\r\n                \r\nOptions\r\n-------\r\n\r\nAffichage des messages d'aide : \r\n\r\n    --help\r\n    \r\nFixer un algorithme de résolution : \r\n\r\n    -algo [dpll|wl]\r\n    \r\nFixer une heuristique de résolution : \r\n\r\n    -h [next_rand|next_mf|rand_rand|rand_mf|dlcs|moms|dlis|jewa]\r\n    \r\nAfficher les messages de débuggage de niveau au plus k : \r\n\r\n    -d k\r\n    \r\nExécuter l'algorithme pas à pas, en stoppant à chaque étape de profondeur k :\r\n(nécessite l'option -d r avec r supérieur à k)\r\n\r\n    -b k\r\n    \r\nEnregistrer dans le fichier f la cnf convertie à partir du problème donné en entrée : \r\n\r\n    -print_cnf f\r\n    \r\nAfficher la cnf convertie à partir de l'entrée :\r\n(attention, cette option ne doit pas être exécutée avec ./colorie) \r\n    \r\n    -print_cnf -\r\n    \r\nStocker les résultats d'un algorithme dans un fichier res.txt (n'enregistre ni les statistiques, ni les messages de debuggage) : \r\n\r\n    ./resol ex.cnf > res.txt\r\n\r\n\r\n\r\n2. Générateur\r\n=============\r\n\r\nLe générateur permet d'obtenir des cnf, des formules propositionnelles et des graphes. Les méthodes de génération aléatoire utilisées sont décrites ci-dessous : \r\n\r\nCNF\r\n---\r\n\r\nLe générateur prend en entrée 3 entiers : n l k.\r\nIl produit une formule à n variables comportant k clauses de longueur l chacune.\r\nLes clauses sont choisises uniformément (on extrait les l premiers éléments d'une permutation de l'ensemble des variables) et sans tautologie ni doublon de littéraux.\r\n\r\nTseitin\r\n-------\r\n\r\nLe générateur prend en entrée 2 entiers : n c.\r\nIl produit une formule propositionnelle à n variables et c connecteurs logiques.\r\nPour ce faire, l'algorithme récursif suivant est utilisé : \r\n\r\n```\r\n  TSEITIN_RANDOM(n,c)\r\n    Si c=0 alors\r\n      renvoyer une variable choisie aléatoirement entre 1 et n\r\n    Sinon\r\n      choisir aléatoirement un connecteur logique : connect\r\n      Si connect = ~ alors\r\n        renvoyer ~TSEITIN_RANDOM(n,c-1)\r\n      Sinon\r\n        renvoyer TSEITIN_RANDOM(n,(c-1)/2)connectTSEITIN_RANDOM(n,c-1-(c-1)/2)\r\n```\r\n\r\nColor\r\n-----\r\n\r\nLe générateur prend en entrée un entier n et un flottant p (compris entre 0 et 1).\r\nIl produit un graphe à n sommets pour lequel chaque arête a une probabilité d'existence p.\r\n\r\n*Remarque* : le graphe généré ne respecte pas pleinement le format DIMACS. En effet, la ligne \"p edge v e\" contient systématiquement la valeur 1 pour e (nombre d'arêtes du graphe). En effet, il n'est pas possible de connaitre le nombre d'arêtes que comportera un graphe généré avant d'avoir choisi (aléatoirement) l'ensemble de ses arêtes. Or, il n'est pas judicieux de stocker au cours de la génération l'ensemble des arêtes (afin de les compter à posteriori) puisque ceci ralentirait le temps d'exécution et occuperait trop d'espace mémoire. Les algorithmes que nous utilisons n'utilisent pas la valeur e figurant dans la ligne \"p edge v e\", nous avons donc fait le choix d'indiquer systématiquement e=1.\r\n\r\n\r\n\r\n3. Suivi de l'algorithme et debuggage\r\n=====================================\r\n\r\nL'ensemble des outils de debuggage et de suivi des exécutions figure dans le fichier debug.ml. Une brève description est fournie ci-dessous.\r\n\r\nMessages de debuggage\r\n---------------------\r\n\r\nLa mise en place de messages de debuggage se fait au sein du code en ajoutant des lignes de la forme : \r\n\r\n    debug#p 2 \"Propagation : setting %d to %B\" var b; \r\n    \r\nIci, le message de debuggage est \"Propagation : setting var to b\" (%d et %B sont remplacé par var et b).\r\nL'entier 2 indique la profondeur de debuggage. Plus la profondeur est élevée, plus le message de debuggage doit indiquer une information précise. Par exemple, le message suivant a une profondeur faible car il renseigne uniquement sur l'algorithme utilisé : \r\n\r\n    debug#p 1 \"Using algorithm %s and heuristic %s\" config.nom_algo config.nom_heuristic;\r\n\r\nAfin d'afficher tous messages de profondeur au plus k lors de l'exécution de l'algorithme, il faut entrer l'option : \r\n\r\n    -d k\r\n  \r\n*A noter* : à partir d'une profondeur de debuggage 1 (-d 1), si le programme renvoie SATISFIABLE, l'assignation des variables obtenue en résultat est vérifiée sur la formule de départ et une ligne \"[debug] Check : \" indique si cette assignation est bien valide (true ou false).\r\n  \r\nExécution pas à pas\r\n---------------------\r\n\r\nIl est possible de stopper l'algorithme sur certain messages de debuggage. Pour cela, il faut inscrire au sein du code : \r\n\r\n    debug#p 2 ~stops:true \"Propagation : setting %d to %B\" var b;\r\n\r\nPour afficher tous les messages de debuggage de profondeur au plus k et stopper l'algorithme à chaque message de profondeur l (l <= k) rencontré, entrer l'option : \r\n\r\n    -d k -b l\r\n\r\nStatistiques\r\n------------\r\n\r\nDifférents types de données peuvent être enregistrés au cours de l'algorithme.\r\n\r\nUne table de hachage permet d'associer des entiers à des chaines de caractères et d'incrémenter ces entiers. Il suffit pour cela d'inclure la ligne suivante au sein du code : \r\n \r\n    stats#record s;\r\n  \r\nCette ligne a pour conséquence, chaque fois qu'elle est rencontrée, d'incrémenter l'entier associé au à la chaine s. Si s ne figure pas dans la table de hachage, il y est ajouté et se voit associer la valeur 1.\r\n\r\nDeux statistiques sont actuellement intégrées à notre code : \r\n  * nombre de conflits (provoquant un backtracking)\r\n  * nombre de paris effectués\r\n\r\nTimers\r\n------\r\n\r\nIl est possible d'obtenir des temps d'exécution sur des portions de code.\r\nUn nouveau timer peut être défini et démarré de la façon suivante (au sein du code) : \r\n\r\n    stats#start_timer \"Time (s)\";\r\n  \r\nPour arrêter le timer défini ci-dessus : \r\n\r\n    stats#stop_timer \"Time (s)\";\r\n  \r\nActuellement, trois temps sont enregistrés par défaut : \r\n  - \"Time (s)\" : le temps utilisé pour résoudre la cnf donnée\r\n  - \"Reduction (s)\" : le temps utilisé pour convertir le problème donné en entrée en une cnf (uniquement pour tseitin et colorie)\r\n  - \"Decision (heuristic) (s)\" : le temps utilisé par les heuristiques pour décider sur quels littéraux parier\r\n\r\n\r\n\r\n4. Structures de données\r\n========================\r\n\r\nLes structures suivantes sont utilisées par l'algorithme :\r\n\r\nclause.ml:\r\n---------\r\n\r\n* variable : les variables sont des entiers\r\n\r\n* varset : objet représentant un ensemble de variables. Permet de cacher temporairement des variables.\r\n\r\n* clause : une clause est un objet qui contient 2 varset : \r\n              * vpos : l'ensemble des variables apparaissant positivement dans la clause \r\n              * vneg : l'ensemble des variables apparaissant négativement dans la clause\r\n           Par exemple, pour la clause 1 2 -3, on a vpos={1,2} et vneg={3}\r\n              * wl1 et wl2 : indiquent quels sont les 2 littéraux qui surveillent la clause (utilisée uniquement pour les watched literals)\r\n\r\nLes assignations de valeurs dans la clause se traduisent en un passage des littéraux faux dans la partie cachée.\r\n\r\nformule.ml:\r\n-----------\r\n\r\n* clauseset : objet représentant un ensemble de clauses. Permet de cacher temporairement des clauses.\r\n              Note : On compare les clauses en leur assignant un identifiant unique à leur création.\r\n\r\n* 'a vartable : table d'association polymorphique sur les variables\r\n\r\n* formule : une formule est un objet qui contient 4 valeurs :\r\n              * nb_var : le nombre de variables apparaissant dans la formule\r\n              * clauses : clauseset contenant les clauses formant la formule\r\n              * paris : un bool vartable correspondant à une assignation partielle des variables\r\n              * x : un compteur permettant de numéroter les clauses\r\n\r\nformule_dpll.ml:\r\n----------------\r\n\r\n* occurences : 2 vartable de clauseset permettant de savoir où apparait chaque variable selon sa positivité.\r\n               Si aucun pari n'est fait sur la variable ils contiennent la liste des clauses visibles où elle apparait.\r\n               Si un pari a été fait ils contiennent la liste de clauses cachées qu'il faudra restaurer en cas de backtrack.\r\n\r\nLes assignations de valeur dans la formule se traduisent en un passage des clauses validées par le littéral dans la partie cachée\r\ndes clauses, une modification des listes d'occurences pour garantir la propriété citée précédemment et une assignation dans les clauses. \r\n\r\nformule_wl.ml:\r\n----------------\r\n\r\n* wl_pos et wl_neg : 2 vartable de clauseset permettant de savoir pour chaque littéral dans quelles clauses il apparait.\r\n\r\n\r\n\r\n5. Algorithme DPLL\r\n==================\r\n\r\nL'algorithme DPLL est implémenté comme une alternance de phases de propagation de contraintes et de paris sur des variables libres.\r\n\r\nLa variable à assigner est choisie comme la première variable non assignée.\r\n\r\nLa propagation des contraintes est accélérée par la connaissance par la formule des clauses contenant la variable assignée,\r\nOn évite ainsi de parcourir toutes les clauses. \r\n\r\nPrétraitement :\r\n---------------\r\n\r\nLe prétraitement effectué se limite à supprimer les clauses trivialement satisfiables : celles contenant x et -x.\r\nLa première étape de propagation des contraintes n'est jamais annulée (sauf si on ne trouve pas d'assignation) et joue donc le rôle du prétraitement.\r\n\r\n\r\n\r\n6. Algorithme Watched Literals\r\n==============================\r\n\r\nPrétraitement :\r\n---------------\r\n\r\nLe prétraitement s'effectue en trois étapes : \r\n  - suppression des tautologies\r\n  - détection des clauses singletons et affectations des variables constituant ces clauses (avec propagation)\r\n  - détection d'éventuelles clauses vides (ce qui entrainerait l'insatisfaisabilité de la formule)\r\n\r\nUne fois la phase de prétraitement terminée (et si elle n'a pas échouée), on garantie alors qu'il est possible d'établir la surveillance de 2 littéraux différents par clause.\r\n\r\nDéroulement :\r\n-------------\r\n\r\nL'algorithme choisie une variable à assigner puis propage le résultat sur les watched literals : \r\nLorsqu'une paire (v1,v2) est surveillée dans une clause c et que l'on vient d'assigner v1 à true, il y a 4 possibilitées (que l'on résume par le type wl_update dans formule_wl.ml) : \r\n  - conflit : tous les littéraux de la clause sont faux, il faut backtracker et revenir sur le dernier pari\r\n  - v2 est vrai : il n'y a rien à faire\r\n  - on parvient à trouver un nouveau littéral v3 à surveiller, on déplace alors la surveillance de v1 à v3\r\n  - v2 est le seul littéral non faux (et non assigné) de c : on assigne v2 de sorte à satisfaire c, puis on propage\r\n\r\nL'étape de backtracking est implémentée en maintenant une liste de toutes les variables instanciées depuis le dernier pari. Lors d'un conflit, on parcourt cette liste pour remettre à \"indéfinie\" la valeur des variables.\r\n \r\nLes différents opérations menées prennent appuies sur les deux faits suivants : \r\n  - A tout instant, chaque clause connait les 2 littéraux qui la surveillent (accès en temps constant à cette information)\r\n  - A tout instant, chaque littéral connait les clauses qu'il surveille\r\n\r\n\r\n\r\n7. Algorithme Tseitin\r\n=====================\r\n\r\nL'algorithme Tseitin permet de convertir une formule propositionnelle en une cnf.\r\n\r\nNous avons choisi les associativités suivantes pour les différents opérateurs logiques :\r\n  * => : right associative\r\n  * <=> : non associative\r\n  * /\\,\\/ : left associative\r\n\r\nLes priorités sont : NOT > AND > OR > IMP > EQU\r\n\r\nExemple : a/\\b => c est lu comme (a/\\b) => c\r\n  \r\nLe dossier src/tseitin contient l'ensemble des outils mis en place. En particulier, le fichier tseitin.ml contient l'algorithme de conversion.\r\n\r\nEtant donné une formule propositionnelle p, l'algorithme Tseitin produit une cnf [p] telle que p et [p] sont équisatisfiables. La taille de [p], ainsi que le temps d'exécution de l'algorithme, sont linéaires en la taille de p.\r\n\r\n  \r\n\r\n8. Algorithme Colorie\r\n=====================\r\n\r\nEtant donné un entier k et un graphe G, l'algorithme Colorie indique si G peut-être colorié à l'aide de k couleurs distincts.\r\nLe dossier src/color contient l'ensemble des outils mis en place à cette fin.\r\n\r\nOn rappelle ci-dessous la procédure permettant de construire une cnf indiquant si le graphe G=(V,E) peut être colorié avec k couleurs :\r\n  - pour chaque sommet i, on produit la clause i_1 \\/ i_2 \\/ ... \\/ i_k indiquant que i doit se voir attribuer une couleur entre 1 et k\r\n  - pour chaque arête (i,j), pour chaque entier l entre 1 et k, on produit la clause ~i_l \\/ ~j_l indiquant que i et j ne doivent pas avoir la même couleur.\r\n  \r\nEtant donné un graphe G=(V,E) et un entier de coloriage k, la cnf produite est donc constituée de |V| clauses de longueurs k, et k*|E| clauses de longueurs 2.\r\nLe temps nécessaire à la production de la cnf est linéaire en la taille de la cnf produite.\r\n\r\n\r\n\r\n9. Heuristiques\r\n===============\r\n\r\nLes heuristiques permettent de déterminer le littéral sur lequel effectuer le prochain pari. Les différentes heuristiques implémentées sont décrites ci-dessous.\r\n\r\nHeuristiques de choix de polarité\r\n---------------------------------\r\n\r\nEtant donnée une variables, ces heuristiques déterminent la polarité à lui joindre (pour obtenir un littéral).\r\n\r\nPOLARITE_RAND :\r\n  * renvoie une polarité aléatoire (true ou false)\r\n\r\nPOLARITE_MOST_FREQUENT :\r\n  * pour DPLL : renvoie la polarité avec laquelle la variable apparait le plus fréquemment dans la formule\r\n  * pour WL : renvoie la polarité avec laquelle la variable est la plus surveillée dans la formule\r\n\r\nHeuristiques de choix de variable\r\n---------------------------------\r\n\r\nNEXT :\r\n  * renvoie la prochaine variable non encore assignée (ce choix est déterministe et dépend de l'entier représentant chaque variable)\r\n  \r\nRAND : \r\n  * renvoie une variable aléatoire non encore assignée\r\n\r\nDLCS : \r\n  * pour DPLL : renvoie la variable apparaissant le plus fréquemment dans la formule\r\n  * pour WL : renvoie la variable la plus surveillée dans la formule\r\n  \r\nHeuristiques de choix de littéral\r\n---------------------------------\r\n\r\nOn indique pour chaque heuristique l'argument permettant de l'appeler.\r\n\r\nLes 2 catégories d'heuristiques décrites ci-dessus peuvent être combinées pour donner lieu à 6 heuristiques de choix de littéral : \r\n\r\n  * NEXT + POLARITE_RAND          (-h next_rand)\r\n  * NEXT + POLARITE_MOST_FREQUENT (-h next_mf)\r\n  * RAND + POLARITE_RAND          (-h rand_rand)\r\n  * RAND + POLARITE_MOST_FREQUENT (-h rand_mf)\r\n  * DLCS + POLARITE_RAND          (cette option n'est pas disponible)\r\n  * DLCS + POLARITE_MOST_FREQUENT (-h dlcs)\r\n\r\nOn dispose également des heuristiques suivantes : \r\n\r\nMOMS (-h moms)\r\n  * renvoie le littéral apparaissant le plus fréquemment dans les clauses de taille minimum\r\n   \r\nDLIS (-h dlis)\r\n  * pour DPLL : renvoie le littéral qui rend le plus de clauses satisfaites\r\n  * pour WL : renvoie le littéral qui rend le plus de jumelles satisfaites\r\n  \r\nJEWA (Jeroslow-Wang) (-h jewa)\r\n  * attribue à chaque littéral l un score : somme (pour les clauses C contenant l) de (2**-|C|)\r\n  * renvoie le littéral avec le plus grand score\r\n\r\n\r\n\r\n10. Performances\r\n================\r\n\r\nUne étude des performances des différents algorithmes et heuristiques figure dans le dossier \"performances\". Consulter le fichier README présent dans ce dossier pour de plus amples informations.\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}