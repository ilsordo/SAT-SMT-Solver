print_cnf :
  - si pas d'arg supplémentaires : affiches "f"
  - si -d 1 : affiche dans le désordre ? (et commence par un f encore ?)
  
  
ajouter une option "print_assoc" (par ex) pour afficher les correspondances du renommage


si 0 conflits (avec -d 1) ça n'affiche pas "Conflits : 0"


vérifier priorité utilisées dans tseitin


le traitement de % a été ajouté temporairement dans lexer.ml (ou parser je sais plus)




-------------------------------------------------------------------------------------------

Dans WL : 
  - optimisation : si la variable x est assignée à vraie, dans toute clause c non encore satisfaite où non x apparait (surveillé ou non), on met en place une surveillance sur x
  
  
Tests : 
  - Construire une batterie de tests intéressants (notamment de petites formules avec des cas pathologiques), 
  - Pouvoir lancer des tests sur des dossiers de fichiers
  - Vérifier que la réponse UNSATISFIABLE est correcte par un appel à minisat ?
  - des fichiers de test ici : http://www.cs.ubc.ca/~hoos/SATLIB/benchm.html
  
  
Utiliser le type literal partout où c'est possible


Passer les champs occurences_pos/neg dans formule.ml ? (et abandonner la création temporaire de ces ensembles dans formule_wl.ml ?)


Suggestion de syntaxe :

./tseitin fichier.txt
  >> affiche SATISFIABLE / UNSATISFIABLE + affection des variables (éventuellement string) si possible
./tseitin-wl fichier.txt
./tseitin -algo wl fichier.txt
./tseitin -cnf fichier.txt


./colorie k fichier.col
./colorie-wl k fichier.col
./colorie -algo dpll k fichier.col
  >> affiche sortie au format dot/graphviz


