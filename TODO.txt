Dans DPLL : 
  - optimiser les tests de singletons (actuellement basés sur le cardinal >> est-ce fait en temps constant ?)
      >> après tests sur une formule (n,l,k)=(50000,3000,2000), il semble qu'utiliser max_elt et min_elt n'impact pas les perfs

Dans WL : 
  - optimisation : si la variable x est assignée à vraie, dans toute clause c non encore satisfaite où non x apparait (surveillé ou non), on met en place une surveillance sur x
  
Génération de tests aléatoires : 
  - accélérer la génération de tests aléatoires ?
  - comment générer une formule (n,l,k) forcèment satisfiable :
      * tirer au hasard une assignation pour chacune des n variables
      * tirer au hasard les clauses, mais rejeter toutes celles qui ne sont pas satisfaites
      * cette méthode favoriserait des formules "plus simples" à résoudre
  - page intéressante : http://www.cs.ubc.ca/~hoos/SATLIB/Benchmarks/SAT/RND3SAT/descr.html
  
Tests : 
  - Construire une batterie de tests intéressants (notamment de petites formules avec des cas pathologiques), 
  - Pouvoir lancer des tests sur des dossiers de fichiers
  - Vérifier que la réponse UNSATISFIABLE est correcte par un appel à minisat ?
  - des fichiers de test ici : http://www.cs.ubc.ca/~hoos/SATLIB/benchm.html
  
Stats :
  - Intégrer les stats partout (notamment WL)
  - Compter les conflits, nb de paris... 

Ajouter plus de commentaires ?

Utiliser le type literal partout où c'est possible

Passer les champs occurences_pos/neg dans formule.ml ? (et abandonner la création temporaire de ces ensembles dans formule_wl.ml ?)

Avoir un prg qui prend une formule (CNF) avec des var qcq et le transforme au format DIMACS, en renvoyant Map d'association

./tseitin fichier.txt
  >> affiche SATISFIABLE / UNSATISFIABLE + affection des variables (éventuellement string) si possible
./tseitin-wl fichier.txt
./tseitin -algo wl fichier.txt
./tseitin -cnf fichier.txt


./colorie k fichier.col
./colorie-wl k fichier.col
./colorie -algo dpll k fichier.col
  >> affiche sortie au format dot/graphviz


